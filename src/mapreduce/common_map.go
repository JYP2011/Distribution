package mapreduce

import (
	"hash/fnv"
	"io/ioutil"
	"log"
	"encoding/json"
	"strconv"
	"os"
	"strings"
)

// doMap manages one map task: it reads one of the input files
// (inFile), calls the user-defined map function (mapF) for that file's
// contents, and partitions the output into nReduce intermediate files.
func doMap(
	jobName string, // the name of the MapReduce job
	mapTaskNumber int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(file string, contents string) []KeyValue,
) {
	//
	// You will need to write this function.
	//
	// The intermediate output of a map task is stored as multiple
	// files, one per destination reduce task. The file name includes
	// both the map task number and the reduce task number. Use the
	// filename generated by reduceName(jobName, mapTaskNumber, r) as
	// the intermediate file for reduce task r. Call ihash() (see below)
	// on each key, mod nReduce, to pick r for a key/value pair.
	//
	// mapF() is the map function provided by the application. The first
	// argument should be the input file name, though the map function
	// typically ignores it. The second argument should be the entire
	// input file contents. mapF() returns a slice containing the
	// key/value pairs for reduce; see common.go for the definition of
	// KeyValue.
	//
	// Look at Go's ioutil and os packages for functions to read
	// and write files.
	//
	// Coming up with a scheme for how to format the key/value pairs on
	// disk can be tricky, especially when taking into account that both
	// keys and values could contain newlines, quotes, and any other
	// character you can think of.
	//
	// One format often used for serializing data to a byte stream that the
	// other end can correctly reconstruct is JSON. You are not required to
	// use JSON, but as the output of the reduce tasks *must* be JSON,
	// familiarizing yourself with it here may prove useful. You can write
	// out a data structure as a JSON string to a file using the commented
	// code below. The corresponding decoding functions can be found in
	// common_reduce.go.
	//
	//   enc := json.NewEncoder(file)
	//   for _, kv := ... {
	//     err := enc.Encode(&kv)
	//
	// Remember to close the file after you have written all the values!
	//
	mapFile, err := ioutil.ReadFile(inFile)
	if err != nil{
		log.Fatal("Read file error: ", err)
	} else {
		fileKV := mapF(inFile, string(mapFile))
		fileKVReduceNo := make(map[string][2]string)

		for _, v := range fileKV{
			reduceNo := ihash(v.Key)
			newValue := [2]string{strconv.Itoa(reduceNo), v.Value}
			fileKVReduceNo[v.Key] = newValue
		}

		for i:=0; i < nReduce; i++ {
			var iKV []KeyValue
			for k, v := range fileKVReduceNo{
				rNo, _ := strconv.Atoi(v[0])
				if rNo % nReduce == i{
					newKV := KeyValue{
						Key:k,
						Value: string(v[1])}
					iKV = append(iKV, newKV)
				}
			}
			mapContents, _ := json.Marshal(iKV)
			contentsReader := strings.NewReader(string(mapContents))
			jsonDec := json.NewDecoder(contentsReader)
			reduceFileName := reduceName(jobName, mapTaskNumber, i)
			resultFile, e := os.Create(reduceFileName)

			if e!= nil{
				log.Fatal("Error when create result file: ", e)
			}

			jsonEnc := json.NewEncoder(resultFile)
			_, err1 := jsonDec.Token()
			if err1 != nil {
				log.Fatal(err)
			}
			for jsonDec.More(){
				var kv KeyValue
				decErr := jsonDec.Decode(&kv)
				if decErr!=nil{log.Fatal("Error when decode KV: ",decErr)}
				encE := jsonEnc.Encode(&kv)
				if encE!=nil{log.Fatal("Error when decode KV: ",encE)}

			}
			_, err2 := jsonDec.Token()
			if err2 != nil {
				log.Fatal(err)
			}
			resultFile.Close()
		}

	}
}

func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}
